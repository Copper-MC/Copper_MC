// Generated by Haxe 4.3.1
#ifndef INCLUDED_src_Server
#define INCLUDED_src_Server

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(handle,OfflinePingPong)
HX_DECLARE_CLASS1(src,Server)
HX_DECLARE_CLASS2(sys,net,Address)
HX_DECLARE_CLASS2(sys,net,Host)
HX_DECLARE_CLASS2(sys,net,Socket)
HX_DECLARE_CLASS2(sys,net,UdpSocket)

namespace src{


class HXCPP_CLASS_ATTRIBUTES Server_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Server_obj OBJ_;
		Server_obj();

	public:
		enum { _hx_ClassId = 0x0a07c753 };

		void __construct(::String hostName,::String ip,int port);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.Server")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"src.Server"); }
		static ::hx::ObjectPtr< Server_obj > __new(::String hostName,::String ip,int port);
		static ::hx::ObjectPtr< Server_obj > __alloc(::hx::Ctx *_hx_ctx,::String hostName,::String ip,int port);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Server_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Server",e3,be,cb,a2); }

		::String HostName;
		::String Ip;
		int Port;
		 ::sys::net::UdpSocket UdpServer;
		 ::sys::net::Host IpHost;
		 ::sys::net::Address AllAdd;
		 ::handle::OfflinePingPong offlineping;
		void Start();
		::Dynamic Start_dyn();

		void HandlePackets();
		::Dynamic HandlePackets_dyn();

};

} // end namespace src

#endif /* INCLUDED_src_Server */ 
