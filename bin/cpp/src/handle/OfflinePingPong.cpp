// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_handle_OfflinePingPong
#include <handle/OfflinePingPong.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_sys_net_Address
#include <sys/net/Address.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif
#ifndef INCLUDED_sys_net_UdpSocket
#include <sys/net/UdpSocket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_868ced2023bd753f_12_new,"handle.OfflinePingPong","new",0xcd756519,"handle.OfflinePingPong.new","handle/OfflinePingPong.hx",12,0x932c94b8)
HX_LOCAL_STACK_FRAME(_hx_pos_868ced2023bd753f_18_Offline_Ping,"handle.OfflinePingPong","Offline_Ping",0xe649acf5,"handle.OfflinePingPong.Offline_Ping","handle/OfflinePingPong.hx",18,0x932c94b8)
namespace handle{

void OfflinePingPong_obj::__construct( ::haxe::io::Bytes buf, ::sys::net::Address add, ::sys::net::UdpSocket socket){
            	HX_STACKFRAME(&_hx_pos_868ced2023bd753f_12_new)
HXLINE(  13)		this->buf = buf;
HXLINE(  14)		this->add = add;
HXLINE(  15)		this->socket = socket;
            	}

Dynamic OfflinePingPong_obj::__CreateEmpty() { return new OfflinePingPong_obj; }

void *OfflinePingPong_obj::_hx_vtable = 0;

Dynamic OfflinePingPong_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OfflinePingPong_obj > _hx_result = new OfflinePingPong_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool OfflinePingPong_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3310e261;
}

void OfflinePingPong_obj::Offline_Ping(){
            	HX_GC_STACKFRAME(&_hx_pos_868ced2023bd753f_18_Offline_Ping)
HXLINE(  20)		 ::haxe::io::Bytes packet = this->buf->sub(0,1);
HXLINE(  22)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  22)		::String _hx_tmp1 = ((HX_("Packet Id: ",d9,2a,e7,03) + HX_("0x",48,2a,00,00)) + packet->toHex());
HXDLIN(  22)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("src/handle/OfflinePingPong.hx",8d,fc,5a,b9),22,HX_("handle.OfflinePingPong",a7,e4,8c,f4),HX_("Offline_Ping",ce,20,6d,dc)));
HXLINE(  24)		 ::haxe::io::Bytes timesubs = this->buf->sub(5,8);
HXLINE(  25)		 ::haxe::io::Bytes timesubss = this->buf->sub(1,8);
HXLINE(  26)		 ::haxe::io::BytesInput timeinput =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,timesubs,null(),null());
HXLINE(  27)		timeinput->set_bigEndian(true);
HXLINE(  28)		int time = timeinput->readInt32();
HXLINE(  29)		::haxe::Log_obj::trace((HX_("Time: ",13,50,66,53) + time),::hx::SourceInfo(HX_("src/handle/OfflinePingPong.hx",8d,fc,5a,b9),29,HX_("handle.OfflinePingPong",a7,e4,8c,f4),HX_("Offline_Ping",ce,20,6d,dc)));
HXLINE(  32)		 ::haxe::io::Bytes magicsubs = this->buf->sub(9,16);
HXLINE(  33)		::String RakNetMagic = magicsubs->toHex();
HXLINE(  34)		::haxe::Log_obj::trace((HX_("RakNet Magic: ",d4,15,da,ff) + RakNetMagic),::hx::SourceInfo(HX_("src/handle/OfflinePingPong.hx",8d,fc,5a,b9),34,HX_("handle.OfflinePingPong",a7,e4,8c,f4),HX_("Offline_Ping",ce,20,6d,dc)));
HXLINE(  36)		 ::haxe::io::Bytes guidsubs = this->buf->sub(25,8);
HXLINE(  37)		::String ClientGuid = guidsubs->toHex();
HXLINE(  38)		::haxe::Log_obj::trace((HX_("Client guid: ",84,91,5b,4a) + ClientGuid),::hx::SourceInfo(HX_("src/handle/OfflinePingPong.hx",8d,fc,5a,b9),38,HX_("handle.OfflinePingPong",a7,e4,8c,f4),HX_("Offline_Ping",ce,20,6d,dc)));
HXLINE(  40)		 ::haxe::io::Bytes data = ::haxe::io::Bytes_obj::alloc(1024);
HXLINE(  41)		 ::haxe::io::BytesOutput output =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE(  42)		::String ServerMOTD = HX_("MCPE;CopperMC Server;589;1.20.0;2;20;13253860892328930865;Powered by CopperMC;Survival;1;19132;19133;",b1,32,5b,41);
HXLINE(  44)		output->set_bigEndian(false);
HXLINE(  45)		output->writeByte(28);
HXLINE(  47)		output->set_bigEndian(true);
HXLINE(  48)		output->writeBytes(timesubss,0,timesubss->length);
HXLINE(  50)		output->set_bigEndian(true);
HXLINE(  51)		output->writeBytes(guidsubs,0,guidsubs->length);
HXLINE(  53)		output->set_bigEndian(false);
HXLINE(  54)		output->writeBytes(magicsubs,0,magicsubs->length);
HXLINE(  56)		output->set_bigEndian(true);
HXLINE(  57)		int motd = ServerMOTD.length;
HXLINE(  58)		output->writeUInt16(motd);
HXLINE(  59)		 ::haxe::io::Bytes motdd = ::haxe::io::Bytes_obj::ofString(ServerMOTD,::haxe::io::Encoding_obj::UTF8_dyn());
HXLINE(  60)		output->writeBytes(motdd,0,motdd->length);
HXLINE(  61)		data = output->getBytes();
HXLINE(  62)		 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(  62)		::String _hx_tmp3 = data->toHex();
HXDLIN(  62)		_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("src/handle/OfflinePingPong.hx",8d,fc,5a,b9),62,HX_("handle.OfflinePingPong",a7,e4,8c,f4),HX_("Offline_Ping",ce,20,6d,dc)));
HXLINE(  64)		this->socket->sendTo(data,0,data->length,this->add);
            	}


HX_DEFINE_DYNAMIC_FUNC0(OfflinePingPong_obj,Offline_Ping,(void))


::hx::ObjectPtr< OfflinePingPong_obj > OfflinePingPong_obj::__new( ::haxe::io::Bytes buf, ::sys::net::Address add, ::sys::net::UdpSocket socket) {
	::hx::ObjectPtr< OfflinePingPong_obj > __this = new OfflinePingPong_obj();
	__this->__construct(buf,add,socket);
	return __this;
}

::hx::ObjectPtr< OfflinePingPong_obj > OfflinePingPong_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::io::Bytes buf, ::sys::net::Address add, ::sys::net::UdpSocket socket) {
	OfflinePingPong_obj *__this = (OfflinePingPong_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OfflinePingPong_obj), true, "handle.OfflinePingPong"));
	*(void **)__this = OfflinePingPong_obj::_hx_vtable;
	__this->__construct(buf,add,socket);
	return __this;
}

OfflinePingPong_obj::OfflinePingPong_obj()
{
}

void OfflinePingPong_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OfflinePingPong);
	HX_MARK_MEMBER_NAME(buf,"buf");
	HX_MARK_MEMBER_NAME(add,"add");
	HX_MARK_MEMBER_NAME(socket,"socket");
	HX_MARK_END_CLASS();
}

void OfflinePingPong_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buf,"buf");
	HX_VISIT_MEMBER_NAME(add,"add");
	HX_VISIT_MEMBER_NAME(socket,"socket");
}

::hx::Val OfflinePingPong_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { return ::hx::Val( buf ); }
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"socket") ) { return ::hx::Val( socket ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"Offline_Ping") ) { return ::hx::Val( Offline_Ping_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val OfflinePingPong_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { buf=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"add") ) { add=inValue.Cast<  ::sys::net::Address >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"socket") ) { socket=inValue.Cast<  ::sys::net::UdpSocket >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OfflinePingPong_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("buf",33,c3,4a,00));
	outFields->push(HX_("add",21,f2,49,00));
	outFields->push(HX_("socket",b3,8b,46,26));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OfflinePingPong_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(OfflinePingPong_obj,buf),HX_("buf",33,c3,4a,00)},
	{::hx::fsObject /*  ::sys::net::Address */ ,(int)offsetof(OfflinePingPong_obj,add),HX_("add",21,f2,49,00)},
	{::hx::fsObject /*  ::sys::net::UdpSocket */ ,(int)offsetof(OfflinePingPong_obj,socket),HX_("socket",b3,8b,46,26)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OfflinePingPong_obj_sStaticStorageInfo = 0;
#endif

static ::String OfflinePingPong_obj_sMemberFields[] = {
	HX_("buf",33,c3,4a,00),
	HX_("add",21,f2,49,00),
	HX_("socket",b3,8b,46,26),
	HX_("Offline_Ping",ce,20,6d,dc),
	::String(null()) };

::hx::Class OfflinePingPong_obj::__mClass;

void OfflinePingPong_obj::__register()
{
	OfflinePingPong_obj _hx_dummy;
	OfflinePingPong_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("handle.OfflinePingPong",a7,e4,8c,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OfflinePingPong_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OfflinePingPong_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OfflinePingPong_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OfflinePingPong_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace handle
